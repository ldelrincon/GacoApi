name: Deploy to Server
on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Descargar el c√≥digo fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar .NET Core
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Paso 3: Restaurar dependencias y compilar
      - name: Restore and build
        run: |
          dotnet restore --force
          dotnet publish -c Release -r linux-x64 --no-restore --self-contained -o ./publish

      # Paso 4: Copiar archivos y carpetas adicionales
      - name: Copy additional files and folders
        run: |
          cp output.pdf ./publish/
          cp -r Files ./publish/
          cp -r Image ./publish/
          cp libwkhtmltox.so ./publish/

      # Paso 5: Instalar Cloudflare WARP (si es necesario para conectarte al servidor)
      - name: Install Cloudflare WARP
        run: |
          sudo apt-get update
          curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
          sudo apt-get update && sudo apt-get install -y cloudflare-warp

      # Paso 6: Configurar y conectar WARP usando credenciales de servicio
      - name: Configure and connect WARP
        run: |
          script -q -c "warp-cli --accept-tos connector new 'eyJhIjoiOTVhYTFkODk1NjExODc5MmQ0MjY2YTJlZGU1MTBjZDgiLCJ0IjoiMzU1YWJmZDQtNTA4Ni00MTliLWEwMTYtZDhkYThiODA3MjVkIiwicyI6InVxS25lQmwyeGpVbFgrbkRnRmRTdzltU0FML0hXQXBHUm8vQ1BmVGNzT0V0K2dpUXIxZ0hKaFljVXhXUk5vaHd0anQwQkJTR2FWNlM0bXBtVURIK0ZnPT0ifQ=='"
          script -q -c "warp-cli --accept-tos registration show"
          script -q -c "warp-cli --accept-tos connect"
          sleep 15
          script -q -c "warp-cli --accept-tos status"

      # Paso 7: Instalar sshpass, realizar el respaldo, y gestionar respaldos antiguos
      - name: Deploy to server
        env:
          SSH_USERNAME: root
          SSH_PASSWORD: v50llDtK
          SERVER_IP: 69.48.202.76
        run: |
          sudo apt-get install -y sshpass rar
          BACKUP_PATH="/home/Respaldos/API"
          BACKUP_FILE="$(date +%d-%m-%Y_%H-%M).rar"

          echo "Creating backup of current deployment..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" "rar a $BACKUP_PATH/$BACKUP_FILE /var/www/html/api"

          echo "Cleaning old backups, keeping the last 3..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" \
            "ls -1t $BACKUP_PATH/*.rar | tail -n +4 | xargs -d '\n' rm -f || true"

          echo "Stopping GacoApi service..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" "sudo systemctl stop GacoApi"

          echo "Ensuring source directory exists..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" "mkdir -p /var/www/html/api"

          echo "Deploying new files..."
          sshpass -p "$SSH_PASSWORD" rsync -avz ./publish/ "$SSH_USERNAME@$SERVER_IP:/var/www/html/api/"

          echo "Starting GacoApi service..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" "sudo systemctl start GacoApi"

      # Paso 8: Verificar el estado del servicio (opcional)
      - name: Check API service status
        env:
          SSH_USERNAME: root
          SSH_PASSWORD: v50llDtK
          SERVER_IP: 69.48.202.76
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" "sudo systemctl status GacoApi"
